{
    "instructionDetails": [
        {
            "name": "Put",
            "shortDescription": "Put instruction put the given number in specified cell number",
            "syntax": "0 [Number] [Cell Number]",
            "example": [
                "The instruction [0 20 10] at line 1, puts the number 20 in cell number 10",
                "CODE-BLOCK 0 20 10\n9"
            ]
        },
        {
            "name": "Add",
            "shortDescription": "Add instruction adds the number present specified cell number and put the result of addition in result cell number",
            "syntax": "1 [lhs cell number] [rhs cell number] [Result cell number]",
            "example": [
                "The instruction [1 101 100 102], adds value present in cell number 101 and 100 and put the result of addition in cell number 102",
                "CODE-BLOCK 0 45 100\n0 55 101\n1 101 100 102\n9"
            ]
        },
        {
            "name": "Subtract",
            "shortDescription": "Subtract instruction subtracts the number present specified cell number and put the result of subtraction in result cell number",
            "syntax": "2 [lhs cell number] [rhs cell number] [Result cell number]",
            "example": [
                "The instruction [2 101 100 102] at line 3, subtracts value present in cell number 100 from value present in cell number 101 and put the result of subtraction in cell number 102",
                "CODE-BLOCK 0 45 100\n0 55 101\n2 101 100 102\n9"
            ]
        },
        {
            "name": "Jump",
            "shortDescription": "Jumps moves the program counter to the specified cell number",
            "syntax": "3 [cell number]",
            "example": [
                "The instruction [3 13] at line 3 moves the program counter to cell number 13, as a result program execute halt instruction of cell number 13 instead of add instruction of cell number 9",
                "CODE-BLOCK 0 45 100\n0 55 101\n3 13\n1 100 101 102\n9"
            ]
        },
        {
            "name": "JumpIfEqual",
            "shortDescription": "JumpsIfEqual moves the program counter to the specified cell number if value in lhs cell is equal to rhs cell",
            "syntax": "4 [lhs cell number] [rhs cell number] [cell number]",
            "example": [
                "The instruction [4 100 101 15] at line 3 moves the program counter to cell number 15, as a result program execute halt instruction of cell number 13 instead of add instruction of line number 4",
                "CODE-BLOCK 0 45 100\n0 45 101\n4 100 101 15\n1 100 101 102\n9"
            ]
        },
        {
            "name": "JumpIfLessThan",
            "shortDescription": "JumpIfLessThan moves the program counter to the specified cell number if value in lhs cell is less than that of rhs cell",
            "syntax": "5 [lhs cell number] [rhs cell number] [cell number]",
            "example": [
                "The instruction [5 100 101 15] at line 3 moves the program counter to cell number 15, as a result program execute halt instruction of cell number 13 instead of add instruction of line number 4",
                "CODE-BLOCK 0 45 100\n0 55 101\n5 100 101 15\n1 100 101 102\n9"
            ]
        },
        {
            "name": "Read",
            "shortDescription": "Read reads the user input and put that input to the specified cell number",
            "syntax": "6 [cell number]",
            "example": [
                "The instruction [6 1] at line 2 reads the user input and put that value in cell number 1",
                "CODE-BLOCK 0 45 100\n6 1\n9"
            ]
        },
        {
            "name": "Copy",
            "shortDescription": "Copy copies value of lhs cell to rhs",
            "syntax": "7 [lhs cell number] [rhs cell number]",
            "example": [
                "The instruction [7 100 101] at line 2 copies the value of cell number 100 in cell number 101",
                "CODE-BLOCK 0 45 100\n7 100 101\n9"
            ]
        },
        {
            "name": "Halt",
            "shortDescription": "Halt instruction stop the execution of program",
            "syntax": "9",
            "example": [
                "The instruction [9] at line 2, stops the execution of program. Instruction below line 2 won't execute",
                "CODE-BLOCK 0 45 100\n9 \n0 50 102\n0 55 101"
            ]
        }
    ],
    "otherFeatures": [
        {
            "name": "Lable",
            "shortDescription": "Lable allow you name a cell, which you can then later use to refer the cell instead of cell number.",
            "longDescription": " At time declaring lable, lable name should end with colon(:) followed by space and at place of usage lable name without colon. The actual value of cell number get resolved at usage site when you click on load code button. Redeclaration of lable or use of undeclared lable is not allowed.",
            "syntax": "LABLE_NAME: 12 34 34",
            "example": [
                "In the below code at line 7 we have declared a lable SUB by writing SUB:",
                "This gives cell number 17 a name SUB. At line number 4 we have wrote SUB, so at run time the line number 4 becomes 3 17",
                "Similary HALT lable has been declared in line 6 to name cell 16 and is used at line 8",
                "RES lable declared at line 9 to name cell 23.",
                "CODE-BLOCK 0 45 100\n0 55 101\n0 23 103\n3 SUB\n1 100 101 102\nHALT: 9\nSUB: 2 100 101 RES\n3 HALT\nRES: "
            ]
        }
    ]
}